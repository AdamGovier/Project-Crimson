"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
class EmptyLineEncoder {
    constructor(emptyLineMarker, newLine) {
        this.emptyLineMarker = emptyLineMarker || EmptyLineEncoder.defaultEmptyLineMarker;
        this.newLine = newLine || EmptyLineEncoder.defaultNewLine;
    }
    encode(text) {
        return encodeEmptyLines(text, this.emptyLineMarker, this.newLine);
    }
    decode(text) {
        return decodeEmptyLines(text, this.emptyLineMarker, this.newLine);
    }
    addLeadingEmptyLineMarker(node) {
        return addLeadingEmptyLineMarker(node, this.emptyLineMarker);
    }
}
exports.EmptyLineEncoder = EmptyLineEncoder;
EmptyLineEncoder.defaultEmptyLineMarker = "!--empty-line--!";
EmptyLineEncoder.defaultNewLine = '\r\n';
function encodeEmptyLines(text, emptyLineMarker, newLine) {
    const marker = toComment(emptyLineMarker || EmptyLineEncoder.defaultEmptyLineMarker);
    const lines = text.split(/\r?\n/);
    const commentedLines = lines.map(line => line.trim() == '' ? marker : line);
    return commentedLines.join(newLine || EmptyLineEncoder.defaultNewLine);
}
exports.encodeEmptyLines = encodeEmptyLines;
function decodeEmptyLines(text, emptyLineMarker, newLine) {
    const marker = toComment(emptyLineMarker || EmptyLineEncoder.defaultEmptyLineMarker);
    var lines = text.split(/\r?\n/);
    const uncommentedLines = lines.map(line => line == marker ? '' : line);
    return uncommentedLines.join(newLine || EmptyLineEncoder.defaultNewLine);
}
exports.decodeEmptyLines = decodeEmptyLines;
function addLeadingEmptyLineMarker(node, emptyLineMarker) {
    return (typescript_1.default.addSyntheticLeadingComment(node, typescript_1.default.SyntaxKind.MultiLineCommentTrivia, emptyLineMarker || EmptyLineEncoder.defaultEmptyLineMarker, 
    /*hasTrailingNewLine*/ true));
}
exports.addLeadingEmptyLineMarker = addLeadingEmptyLineMarker;
function toComment(marker) {
    return `/*${marker}*/`;
}
